set define off;

create or replace type IPAS2.varchar2_arr is table of varchar2(255);
/
create or replace 
PACKAGE IPAS2.PKG_DASHBOARD AS 


FUNCTION FN_GET_IN_CONDITION(
    PC_ARRAY VARCHAR2_ARR,
    PV_COLUMN_NAME VARCHAR2,
    PV_CONDITION_TYPE VARCHAR2)
  RETURN VARCHAR2;
  
FUNCTION FN_GET_TRACK_TYPE_NAME(PV_REVIEW_ID NUMBER,
                                PV_PCOMID VARCHAR2
                                )
  RETURN VARCHAR2;
  
FUNCTION FN_SELECT_SQL(PV_PCOMID VARCHAR2)
  RETURN  VARCHAR2;
  
FUNCTION FN_OPEN_REVIEW_RULES(PV_PCOMID VARCHAR2)
  RETURN  VARCHAR2;
  
FUNCTION FN_DRAFT_REVIEW_RULES(PV_PCOMID VARCHAR2)
    RETURN  VARCHAR2;

PROCEDURE GET_ALL_OPEN_REVIEWS (                          
                                PV_PGOVCOMID  varchar2_arr,
                                PV_PCOMID VARCHAR2,
                                PV_PSOEID      VARCHAR2,
                                RECORDSET OUT SYS_REFCURSOR);
                                
PROCEDURE GET_ASSIGNED_OPEN_REVIEWS (                          
                                      PV_PGOVCOMID  VARCHAR2_ARR,
                                      PV_PCOMID VARCHAR2,
                                      PV_PSOEID      VARCHAR2,
                                      RECORDSET OUT SYS_REFCURSOR);
                                
                                
PROCEDURE GET_MYDRAFT_REVIEWS (                          
                                PV_PGOVCOMID  VARCHAR2_ARR,
                                PV_PCOMID VARCHAR2,
                                PV_PSOEID      VARCHAR2,
                                RECORDSET OUT SYS_REFCURSOR);
                                

END PKG_DASHBOARD;
/
create or replace 
PACKAGE BODY IPAS2.PKG_DASHBOARD AS

FUNCTION FN_GET_IN_CONDITION(
    PC_ARRAY VARCHAR2_ARR,
    pv_column_name VARCHAR2,
    pv_condition_type VARCHAR2)
  RETURN VARCHAR2
AS
  LV_MOD NUMBER;
  LV_COND_SQL VARCHAR2(30000);
  LV_VAL_SQL VARCHAR2(30000):= '';
BEGIN
  FOR I IN 1..PC_ARRAY.COUNT
  LOOP
    LV_VAL_SQL := LV_VAL_SQL||''''||PC_ARRAY(I)||'''';
    IF I = PC_ARRAY.COUNT THEN
      LV_COND_SQL := PV_COLUMN_NAME||PV_CONDITION_TYPE||'('||LV_VAL_SQL||')';
      LV_VAL_SQL :='';
    ELSE
      LV_VAL_SQL := LV_VAL_SQL||',';
    END IF;
  END LOOP;
  RETURN LV_COND_SQL||' ';
END FN_GET_IN_CONDITION;


FUNCTION FN_GET_TRACK_TYPE_NAME(PV_REVIEW_ID NUMBER,
                                PV_PCOMID VARCHAR2
                                )
  RETURN VARCHAR2
  AS 
  LV_TRACK_TYPE_ID VARCHAR2(100);
  LV_TRACK_TYPE_NAME VARCHAR2(100);
BEGIN
 
  SELECT VIPD.INPUT_VALUE INTO LV_TRACK_TYPE_ID 
  FROM V_IPAS_PRODUCT_DETAILS VIPD WHERE VIPD.REVIEW_ID=PV_REVIEW_ID
  AND VIPD.IPAS_LKP_CODE ='IPAS_REVIEW_TRACK_TYPE';
        
  SELECT GENERIC_NAME 
  INTO LV_TRACK_TYPE_NAME
  FROM LKP_GENERIC_TBL 
  WHERE GENERIC_ID =LV_TRACK_TYPE_ID
  AND COMMITTEE_ID=PV_PCOMID;
  
  RETURN ':'||LV_TRACK_TYPE_NAME;
  
EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN '';  
END FN_GET_TRACK_TYPE_NAME;

-------------------------------------------------------------------------------
FUNCTION FN_SELECT_SQL(PV_PCOMID VARCHAR2)
  RETURN  VARCHAR2
AS
  LV_SELECT_SQL VARCHAR2(30000);
BEGIN
  LV_SELECT_SQL := 'SELECT R.REVIEW_ID,
					  R.REVIEW_OUTCOME_ID REVIEW_OUTCOME,
					  R.REVIEW_STATE_ID REVIEW_STATE,
					  LKGC.GOVERNING_COMMITTEE_NAME,
					  R.REVIEW_NAME,
					  LKC.CATEGORIES,
					  LKPT.PRESENTATION_TYPE_NAME,
					  LKRT.REVIEW_TYPE_NAME'||'|| CASE WHEN '''||PV_PCOMID||'''<>''NPAC'' THEN PKG_DASHBOARD.FN_GET_TRACK_TYPE_NAME(R.REVIEW_ID,'''||PV_PCOMID||''') END REVIEW_TYPE_NAME,
					  R.PRESENTATION_DATE,
					  R.FIRST_CONTACT_DATE,
					  R.SUBMITTED_BY,
					  IP.IPAS_PRODUCT_ID,
					  R.REVIEW_ACTION,
					  RLM.LAST_MEETING_DATE,  
					  R.REVIEW_CUSTOM_ID,
					  LKRO.REVIEW_OUTCOME_NAME,
					  RR.REGIONS,
					  R.IS_CONFIDENTIAL,
					  R.IS_ESIGNATURE_ACCEPTED,
					  R.IS_SIGNED_AGRM
		             FROM 
		            REVIEW R,
		            IPAS_PRODUCT IP,
		            (SELECT RC.REVIEW_ID,LISTAGG(CATEGORY_NAME,'';'') WITHIN GROUP (ORDER BY ROWNUM) CATEGORIES
		                  FROM LKP_CATEGORY LC, REVIEW_CATEGORY RC
		                  WHERE 
		                  LC.CATEGORY_ID=RC.CATEGORY_ID
		                  GROUP BY REVIEW_ID
		                  ) LKC,
		            LKP_REVIEW_TYPE LKRT,
		            LKP_REVIEW_OUTCOME LKRO,
		                    LKP_PRESENTATION_TYPE LKPT,
		            LKP_GOVERNING_COMMITTEE LKGC,
		            (select rm.review_id,max(m.meeting_date) last_meeting_date from meeting m,review_meetings rm
		                  where rm.meeting_id=m.meeting_id
		                  group by rm.review_id
		                       ) RLM,
		            (SELECT RR.REVIEW_ID,LISTAGG(IPAS_REGION_NAME,'';'') WITHIN GROUP (ORDER BY ROWNUM) REGIONS
		                  FROM LKP_REGION LR, REVIEW_REGION RR
		                  WHERE 
		                  LR.IPAS_REGION_ID=RR.IPAS_REGION_ID
		                  GROUP BY REVIEW_ID) RR';
               
  RETURN LV_SELECT_SQL;
  
END FN_SELECT_SQL;

FUNCTION FN_OPEN_REVIEW_RULES(PV_PCOMID VARCHAR2)
  RETURN  VARCHAR2
AS
  LV_OPEN_REVIEWS_SQL VARCHAR2(30000);
BEGIN
      IF PV_PCOMID = 'CPAC' THEN
          LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||' AND(';     
          LV_OPEN_REVIEWS_SQL:=LV_OPEN_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''PENDING_ASSESSMENT_CPAC'' OR  R.REVIEW_OUTCOME_ID=''DUE_DILIGENCE_CPAC'')
             OR (R.REVIEW_OUTCOME_ID=''CPAC_READY_CPAC'' AND R.REVIEW_STATE_ID=''MEETING_DATE_CPAC'')
             OR (R.REVIEW_OUTCOME_ID=''CPAC_READY_CPAC'' AND R.REVIEW_STATE_ID=''DECIDE_OUTCOME_CPAC'')
             OR (R.REVIEW_OUTCOME_ID=''ADD_WORK_CPAC_APPR'' AND R.REVIEW_STATE_ID=''DUE_DILIGENCE_CPAC'')
             OR (R.REVIEW_STATE_ID=''PENDING_APPROVAL_CPAC'' OR R.REVIEW_STATE_ID=''READY_TO_CLOSE_CPAC'')';
          LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||')'; 
       END IF;
       
       IF PV_PCOMID = 'COMPAC' THEN
         LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||' AND(';
         LV_OPEN_REVIEWS_SQL:=LV_OPEN_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''PENDING_ASSESSMENT_COMPAC'' OR  R.REVIEW_OUTCOME_ID=''DUE_DILIGENCE_COMPAC'')
          OR (R.REVIEW_STATE_ID=''PENDING_APPROVAL_COMPAC'' OR R.REVIEW_STATE_ID=''READY_TO_CLOSE_COMPAC'')
          OR (R.REVIEW_OUTCOME_ID=''COMPAC_READY_COMPAC'' AND R.REVIEW_STATE_ID=''MEETING_DATE_COMPAC'')
          OR (R.REVIEW_OUTCOME_ID=''COMPAC_READY_COMPAC'' AND R.REVIEW_STATE_ID=''DECIDE_OUTCOME_COMPAC'')';
         LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||')'; 
      END IF;
        
        IF PV_PCOMID = 'NPAC' THEN
         LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||' AND(';
         LV_OPEN_REVIEWS_SQL:=LV_OPEN_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''PENDING_ASSESSMENT_NPAC'' OR  R.REVIEW_OUTCOME_ID=''DUE_DILIGENCE_NPAC'')
            OR (R.REVIEW_STATE_ID=''PENDING_APPROVAL_NPAC'' OR R.REVIEW_STATE_ID=''READY_TO_CLOSE_NPAC'')
            OR (R.REVIEW_OUTCOME_ID=''NPAC_READY_NPAC'' AND R.REVIEW_STATE_ID=''MEETING_DATE_NPAC'')
            OR (R.REVIEW_OUTCOME_ID=''NPAC_READY_NPAC'' AND R.REVIEW_STATE_ID=''DECIDE_OUTCOME_NPAC'')';
         LV_OPEN_REVIEWS_SQL:= LV_OPEN_REVIEWS_SQL||')';
       END IF;      
 
  RETURN LV_OPEN_REVIEWS_SQL;
  
END FN_OPEN_REVIEW_RULES; 


FUNCTION FN_DRAFT_REVIEW_RULES(PV_PCOMID VARCHAR2)
    RETURN  VARCHAR2
AS
  LV_DRAFT_REVIEWS_SQL VARCHAR2(30000);
BEGIN
      IF PV_PCOMID = 'CPAC' THEN
          LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||' AND(';     
          LV_DRAFT_REVIEWS_SQL:=LV_DRAFT_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''DRAFT_CPAC'' AND R.REVIEW_STATE_ID=''DRAFT_CPAC'')';
          LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||')'; 
       END IF;
       
       IF PV_PCOMID = 'COMPAC' THEN
         LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||' AND(';    
         LV_DRAFT_REVIEWS_SQL:=LV_DRAFT_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''DRAFT_COMPAC'' AND R.REVIEW_STATE_ID=''DRAFT_COMPAC'')';
         LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||')'; 
      END IF;
        
      IF PV_PCOMID = 'NPAC' THEN
         LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||' AND(';    
         LV_DRAFT_REVIEWS_SQL:=LV_DRAFT_REVIEWS_SQL||'(R.REVIEW_OUTCOME_ID=''DRAFT_NPAC'' AND R.REVIEW_STATE_ID=''DRAFT_NPAC'')';
         LV_DRAFT_REVIEWS_SQL:= LV_DRAFT_REVIEWS_SQL||')'; 
      END IF;     
  
  RETURN LV_DRAFT_REVIEWS_SQL;    
      
END FN_DRAFT_REVIEW_RULES;


PROCEDURE GET_ALL_OPEN_REVIEWS (                          
                                  PV_PGOVCOMID  VARCHAR2_ARR,
                                  PV_PCOMID VARCHAR2,
                                  PV_PSOEID     VARCHAR2,
                                  RECORDSET OUT SYS_REFCURSOR) 
  AS
  LV_UNION_SQL  VARCHAR2(30000);
  LV_SEARCH_SQL VARCHAR2(30000); 
  BEGIN
                    
  IF PV_PGOVCOMID  IS NOT EMPTY THEN  
    LV_SEARCH_SQL := LV_SEARCH_SQL||' WHERE '||FN_GET_IN_CONDITION(PV_PGOVCOMID,'LKGC.GOVERNING_COMMITTEE_ID',' IN ');
  END IF;
  
  LV_SEARCH_SQL := LV_SEARCH_SQL||
            'AND R.GOVERNING_COMMITTEE_ID=LKGC.GOVERNING_COMMITTEE_ID
					  AND R.REVIEW_ID           =LKC.REVIEW_ID(+)
					  AND R.REVIEW_TYPE_ID=LKRT.REVIEW_TYPE_ID(+)
					  AND R.PRESENTATION_TYPE=LKPT.PRESENTATION_TYPE_ID(+)
					  AND R.REVIEW_OUTCOME_ID=LKRO.REVIEW_OUTCOME_ID
					  AND R.REVIEW_ID = RLM.REVIEW_ID(+)
					  AND R.REVIEW_ID=IP.REVIEW_ID
					  AND R.REVIEW_ID=RR.REVIEW_ID(+)';
            
     
            
    LV_UNION_SQL:=FN_SELECT_SQL(PV_PCOMID)||LV_SEARCH_SQL||FN_OPEN_REVIEW_RULES(PV_PCOMID);

    DBMS_OUTPUT.PUT_LINE(LV_UNION_SQL);
    --INSERT INTO RAM_TEMP(SQL_TEXT) VALUES(LV_UNION_SQL);
    --COMMIT;
    
    OPEN  RECORDSET FOR LV_UNION_SQL;
    
  END GET_ALL_OPEN_REVIEWS;

 PROCEDURE GET_ASSIGNED_OPEN_REVIEWS (                          
                                    PV_PGOVCOMID  VARCHAR2_ARR,
                                    PV_PCOMID VARCHAR2,
                                    PV_PSOEID varchar2,
                                    RECORDSET OUT SYS_REFCURSOR) 
  AS
  LV_UNION_SQL  VARCHAR2(30000);
  LV_SEARCH_SQL VARCHAR2(30000); 
  BEGIN
  
  IF PV_PSOEID  IS NOT NULL THEN  
    LV_SEARCH_SQL := LV_SEARCH_SQL|| 
                  ',(SELECT DISTINCT REVIEW_ID RC_REVIEW_ID FROM REVIEW_CONTACTS WHERE USER_SOEID='||''''||PV_PSOEID||''''||') RC';
  END IF;
  
  IF PV_PGOVCOMID  IS NOT EMPTY THEN 
    LV_SEARCH_SQL := LV_SEARCH_SQL||' WHERE '||FN_GET_IN_CONDITION(PV_PGOVCOMID,'LKGC.GOVERNING_COMMITTEE_ID',' IN ');
  end if;  
  
  LV_SEARCH_SQL := LV_SEARCH_SQL||
            'AND R.GOVERNING_COMMITTEE_ID=LKGC.GOVERNING_COMMITTEE_ID
						AND R.REVIEW_ID        		=RC.RC_REVIEW_ID
						AND R.REVIEW_ID           =LKC.REVIEW_ID(+)
						AND R.REVIEW_TYPE_ID=LKRT.REVIEW_TYPE_ID(+)
        				AND R.PRESENTATION_TYPE=LKPT.PRESENTATION_TYPE_ID(+)
            			AND R.REVIEW_OUTCOME_ID=LKRO.REVIEW_OUTCOME_ID
						AND R.REVIEW_ID             = RLM.REVIEW_ID(+)
						AND R.REVIEW_ID             =IP.REVIEW_ID
						AND R.REVIEW_ID=RR.REVIEW_ID(+)';
     
    LV_UNION_SQL:=FN_SELECT_SQL(PV_PCOMID)||LV_SEARCH_SQL||FN_OPEN_REVIEW_RULES(PV_PCOMID);   
        
     DBMS_OUTPUT.PUT_LINE(LV_UNION_SQL);
     --INSERT INTO RAM_TEMP(SQL_TEXT) VALUES(LV_UNION_SQL);
     --COMMIT;
     OPEN  RECORDSET FOR LV_UNION_SQL;
       
  END GET_ASSIGNED_OPEN_REVIEWS;
  
  
  PROCEDURE GET_MYDRAFT_REVIEWS (                          
                                  PV_PGOVCOMID  VARCHAR2_ARR,
                                  PV_PCOMID VARCHAR2,
                                  PV_PSOEID      VARCHAR2,
                                  RECORDSET OUT SYS_REFCURSOR) 
  AS
  LV_UNION_SQL  VARCHAR2(30000);
  LV_SEARCH_SQL VARCHAR2(30000); 
  
  BEGIN
                                   
  IF PV_PGOVCOMID  IS NOT EMPTY THEN 
    LV_SEARCH_SQL := LV_SEARCH_SQL||' WHERE '||FN_GET_IN_CONDITION(PV_PGOVCOMID,'LKGC.GOVERNING_COMMITTEE_ID',' IN ');
  END IF; 
    
   IF PV_PSOEID  IS NOT NULL THEN
    LV_SEARCH_SQL := LV_SEARCH_SQL|| '	AND R.CREATED_BY='||''''||PV_PSOEID||''''||' ';
   END IF; 
   
  LV_SEARCH_SQL := LV_SEARCH_SQL||
                    'AND R.GOVERNING_COMMITTEE_ID=LKGC.GOVERNING_COMMITTEE_ID
                    AND R.REVIEW_ID           =LKC.REVIEW_ID(+)
                    AND R.REVIEW_TYPE_ID=LKRT.REVIEW_TYPE_ID(+)
                    AND R.PRESENTATION_TYPE=LKPT.PRESENTATION_TYPE_ID(+)
                    AND R.REVIEW_OUTCOME_ID=LKRO.REVIEW_OUTCOME_ID
                    AND R.REVIEW_ID             = RLM.REVIEW_ID(+)
                    AND R.REVIEW_ID             =IP.REVIEW_ID
                    AND R.REVIEW_ID=RR.REVIEW_ID(+)';
                
    LV_UNION_SQL:=FN_SELECT_SQL(PV_PCOMID)||LV_SEARCH_SQL||FN_DRAFT_REVIEW_RULES(PV_PCOMID);  
    
    DBMS_OUTPUT.PUT_LINE(LV_UNION_SQL);
    --INSERT INTO RAM_TEMP(SQL_TEXT) VALUES(LV_UNION_SQL);
    --COMMIT;
    OPEN RECORDSET FOR LV_UNION_SQL;
    
  END GET_MYDRAFT_REVIEWS;
  
END PKG_DASHBOARD;
/